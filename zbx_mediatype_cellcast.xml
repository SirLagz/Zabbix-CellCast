<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2022-02-15T01:35:23Z</date>
    <media_types>
        <media_type>
            <name>Cellcast</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>appkey</name>
                    <value>YOUR APP KEY</value>
                </parameter>
                <parameter>
                    <name>message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>to</name>
                    <value>{ALERT.SENDTO}</value>
                </parameter>
            </parameters>
            <max_sessions>0</max_sessions>
            <script>try {&#13;
    params = JSON.parse(value),&#13;
    req = new CurlHttpRequest(),&#13;
    fields = {};&#13;
&#13;
    fields.sms_text = params.message;&#13;
    fields.numbers = [params.to];&#13;
    fields.from = &quot;Per Zabbix&quot;;&#13;
&#13;
    req.AddHeader('Content-Type: application/json');&#13;
    req.AddHeader('APPKEY: '+params.appkey);&#13;
&#13;
    var resp = req.Post('https://cellcast.com.au/api/v3/send-sms',JSON.stringify(fields));&#13;
&#13;
    if (req.Status() != 200) {&#13;
        throw JSON.parse(resp).errors[0];&#13;
    }&#13;
&#13;
    Zabbix.Log(3, 'Response : '+resp);&#13;
    Zabbix.Log(3, 'SMS payload : '+JSON.stringify(fields));&#13;
    Zabbix.Log(3, 'URL : https://cellcast.com.au/api/v3/send-sms');&#13;
    return resp;&#13;
&#13;
} catch (error) {&#13;
    Zabbix.Log(3, 'SMS notification failed : '+error);&#13;
    Zabbix.Log(3, 'SMS payload : '+JSON.stringify(fields));&#13;
    Zabbix.Log(3, 'SMS URL : https://cellcast.com.au/api/v3/send-sms');&#13;
    throw 'SMS notification failed : '+error;&#13;
}</script>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Problem: {EVENT.NAME}</subject>
                    <message>Problem started at {EVENT.TIME} on {EVENT.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Operational data: {EVENT.OPDATA}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>Resolved: {EVENT.RECOVERY.NAME}</subject>
                    <message>Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&#13;
Problem name: {EVENT.RECOVERY.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>Updated problem: {EVENT.NAME}</subject>
                    <message>{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&#13;
{EVENT.UPDATE.MESSAGE}&#13;
&#13;
Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery rule: {DISCOVERY.RULE.NAME}&#13;
&#13;
Device IP: {DISCOVERY.DEVICE.IPADDRESS}&#13;
Device DNS: {DISCOVERY.DEVICE.DNS}&#13;
Device status: {DISCOVERY.DEVICE.STATUS}&#13;
Device uptime: {DISCOVERY.DEVICE.UPTIME}&#13;
&#13;
Device service name: {DISCOVERY.SERVICE.NAME}&#13;
Device service port: {DISCOVERY.SERVICE.PORT}&#13;
Device service status: {DISCOVERY.SERVICE.STATUS}&#13;
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Host name: {HOST.HOST}&#13;
Host IP: {HOST.IP}&#13;
Agent port: {HOST.PORT}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
